{"version":3,"sources":["components/general/TopMenu/TopMenu.module.scss","App/App.module.scss","components/utils/ModalWindow/ModalWindow.module.scss","pages/pageCardFood/pageCardFood.module.scss","components/patterns/MarkCard/MarkCard.module.scss","components/general/StatusBar/StatusBar.module.scss","components/patterns/BtnsCtrlCardHeader/BtnsCtrlCardHeader.module.scss","components/patterns/FormInputData/FormInputData.module.scss","utils/helpers/helpers.js","components/utils/Button/Button.js","redux/topMenu/actionTopMenu.js","redux/cards/actionOpenCard.js","components/utils/MenuList/MenuList.js","redux/topMenu/topMenuSelector.js","components/general/TopMenu/TopMenu.js","redux/cards/cardSelectors.js","components/utils/Title/Title.js","components/patterns/BtnsCtrlCardHeader/BtnsCtrlCardHeader.js","components/utils/ModalWindow/ModalWindow.js","components/utils/Input/Input.js","components/patterns/BtnsColection/BtnsColection.js","components/patterns/FormInputData/FormInputData.js","pages/pageCardFood/pageCardFood.js","pages/pageCardCustomer/pageCardCustomer.js","components/general/CardsArea/CardsArea.js","components/patterns/MarkCard/MarkCard.js","components/general/StatusBar/StatusBar.js","App/App.js","index.js","redux/cards/cardsReducer.js","redux/topMenu/topMenuReducer.js","redux/reducersGroups/reducersActiveStateEls.js","rootReducer.js","createStore.js"],"names":["module","exports","getPropsAttribute","atrbValue","Button","props","title","type","action","cb","args","onClick","data-action","defaultProps","actionId","openTopMenuList","createAction","closeTopMenuList","openTopMenuItem","closeTopMenuItem","openCard","turnCard","closeCard","addCardTitle","MenuList","dispatch","useDispatch","renderData","handleActiveItem","id","map","data","key","getTopMenuList","state","activeStateEls","openTopMenu","list","generalMenuBtns","renderMenu","TopMenu","activeTopMenuList","useSelector","handleToggleMenuList","className","scss","topMenu","nav","el","item","cardsList","getCards","openCards","getCardsIds","card","getCardsSet","status","getTurnCards","filter","Title","dataRender","renderBtns","BtnsCtrlCardHeader","handleCardStatus","btnAction","btnsList","shortid","generate","ModalWindow","window","header","children","Input","label","inputName","inputValue","name","value","styles","display","BtnsColection","cbArr","cardId","dataUpdated","length","idx","style","InputDataForm","btnsColSets","useState","setData","foodsCard","onChange","e","target","obj","nameIn","PageFoodCard","openedCards","formInputsDescrSets","formSaleCtrlSets","formUnitsSets","setsLocalBtnsCard","setsGlobalBtnsCard","useEffect","includes","FormInputData","advSetPanel","bottomSideBar","PageCardCustomer","CardsArea","openedCardsIds","openedCardsSet","MarkCard","find","getActiveCard","console","log","data-action-id","btnsCtrlMarkCard","StatusBar","marks","footer","App","Component","app","getCardById","removeCardById","reducerOpenCards","createReducer","actionsCard","payload","cardById","cardWithTitle","reducerTopMenuList","_","reducerTopMenuItem","combineReducers","reducerActiveStateEls","reducerTopMenu","rootReducer","configureStore","reducer","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.031da0c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"topMenu\":\"TopMenu_topMenu__3kVWQ\",\"list\":\"TopMenu_list__2gi6M\",\"isOpen\":\"TopMenu_isOpen__11mXK\",\"item\":\"TopMenu_item__8i6_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app___B2LQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"window\":\"ModalWindow_window__38H3S\",\"header\":\"ModalWindow_header__vbUrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomSideBar\":\"pageCardFood_bottomSideBar__45RPG\",\"advSetPanel\":\"pageCardFood_advSetPanel__3m-0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"MarkCard_label__1V5G9\",\"title\":\"MarkCard_title__2oVCu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"StatusBar_footer__3FEdF\",\"list\":\"StatusBar_list__3VfZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnsList\":\"BtnsCtrlCardHeader_btnsList__Uyc4z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"foodsCard\":\"FormInputData_foodsCard__3vThO\"};","export const getElPropsByEvent = (target, idArr) => {\r\n    const {action, actionId} = target.dataset;\r\n    // console.log('target.closest() :>> ', target.closest(`[data-action-id=\"${el}\"]`));\r\n    const parent =  idArr.find(el => {\r\n        console.log('target.closest :>> ',target.closest(`[data-action-id]`));\r\n        return target.closest(`#${el.id}`) || target.closest(`[data-action-id]`)\r\n    })[\"id\"];  \r\n\r\n    switch(action){\r\n        case \"open\":\r\n            return {\r\n                id: actionId,\r\n                action,\r\n            };\r\n        case \"close\":\r\n            return {\r\n                id: parent,\r\n                action,\r\n            };\r\n        case  \"fullSize\": \r\n            return {\r\n                id: actionId,\r\n                action,\r\n            };\r\n        case \"turn\":\r\n            return {\r\n                id: actionId,\r\n                action,\r\n            };\r\n        default:\r\n            return;\r\n    }\r\n}\r\n\r\nexport const getPropsAttribute = atrbValue => atrbValue ? atrbValue : \"\";\r\n\r\nexport const getDispatchData = (id, action) => {  \r\n    const payload = {id};\r\n    payload[action] = true;\r\n    return payload;\r\n  };\r\n\r\nexport const isActiveEl = (activeEls, id) => activeEls.find(el => el.id === id);","import React from \"react\";\r\nimport { getPropsAttribute } from \"../../../utils/helpers/helpers\";\r\n\r\nconst Button = props => {\r\n\t\r\n\tconst { title, type, action, cb, args } = props;\r\n\r\n    const handleClick = () => cb(...args)\r\n\r\n\treturn (\r\n\t\t<button\r\n\t\t\tonClick={handleClick}\r\n\t\t\ttype={type}\r\n\t\t\tdata-action={getPropsAttribute(action)}\r\n\t\t>\r\n\t\t\t{getPropsAttribute(title)}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.defaultProps = {\r\n\ttitle: \"\",\r\n\ttype: \"button\",\r\n\taction: \"\", // type of action of button\r\n\tactionId: \"\", // id of card what use button\r\n};\r\n","import {createAction} from '@reduxjs/toolkit';\r\n\r\nconst openTopMenuList = createAction('open/topMenuList');\r\nconst closeTopMenuList = createAction('close/topMenuList');\r\nconst openTopMenuItem = createAction('open/topMenuItem');\r\nconst closeTopMenuItem = createAction('close/topMenuItem');\r\n\r\nexport {\r\n    openTopMenuList,\r\n    closeTopMenuList,\r\n    openTopMenuItem,\r\n    closeTopMenuItem,\r\n}","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst openCard = createAction(\"open/card\");\r\nconst turnCard = createAction(\"turn/card\");\r\nconst closeCard = createAction(\"close/card\");\r\nconst addCardTitle = createAction(\"add/cardTitle\")\r\n\r\nexport {\r\n\topenCard,\r\n\tturnCard,\r\n\tcloseCard,\r\n\taddCardTitle,\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Button from \"../Button/Button\";\r\nimport { closeTopMenuList } from \"../../../redux/topMenu/actionTopMenu\";\r\nimport { openCard } from \"../../../redux/cards/actionOpenCard\";\r\n\r\nconst MenuList = props => {\r\n\tconst dispatch = useDispatch();\r\n\tconst { renderData } = props;\r\n\r\n\tconst handleActiveItem = id => {\r\n\t\tdispatch(openCard(id));\r\n\t\tdispatch(closeTopMenuList());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{renderData.map(data => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={\"menuListItems\" + data.actionId}>\r\n\t\t\t\t\t\t<Button {...data} cb={handleActiveItem} args={[data.actionId]} />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default MenuList;\r\n","const getTopMenuList = state => state.activeStateEls.openTopMenu.list;\nconst getTopMenuItem = state => state.activeStateEls.openTopMenu.item;\n\nexport {\n    getTopMenuList,\n    getTopMenuItem,\n}","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// imp components\r\nimport Button from \"../../utils/Button/Button\";\r\nimport MenuList from \"../../utils/MenuList/MenuList\";\r\n\r\n// imp render data\r\nimport renderMenu from \"../../../utils/renderData/renderTopMenu.json\";\r\n\r\n// imp redux set\r\nimport { openTopMenuList, closeTopMenuList } from \"../../../redux/topMenu/actionTopMenu\";\r\nimport { getTopMenuList } from \"../../../redux/topMenu/topMenuSelector\";\r\n\r\n// imp styles\r\nimport scss from \"./TopMenu.module.scss\";\r\n\r\nconst { generalMenuBtns } = renderMenu;\r\n\r\nconst TopMenu = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// State\r\n\tconst activeTopMenuList = useSelector(getTopMenuList);\r\n\r\n\tconst handleToggleMenuList = id => {\r\n\t\tif (!activeTopMenuList) {\r\n\t\t\tdispatch(openTopMenuList(id));\r\n\t\t} else {\r\n\t\t\tdispatch(closeTopMenuList());\r\n\t\t\tdispatch(openTopMenuList(id));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<header className={scss.topMenu}>\r\n\t\t\t<nav className={scss.nav}>\r\n\t\t\t\t<ul className={scss.list}>\r\n\t\t\t\t\t{generalMenuBtns.map(el => (\r\n\t\t\t\t\t\t<li className={scss.item} key={\"topMenu\" + el.actionId}>\r\n\t\t\t\t\t\t\t<Button {...el} cb={handleToggleMenuList} args={[el.actionId]} />\r\n\t\t\t\t\t\t\t{activeTopMenuList && el.actionId === activeTopMenuList && <MenuList renderData={el.cardsList} />}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</nav>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default TopMenu;\r\n","// import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getCards = state => state.activeStateEls.openCards;\nconst getCardsIds = state => getCards(state).map(card => card.id);\nconst getCardsSet = state => getCards(state).map(card => ({id: card.id, status: card.status}));\nconst getTurnCards = state => getCards(state).filter(card => card.status === \"turn\")\nconst getActiveCard = (state, id) => getCards(state).find(card => card.id === id);\n\nexport {\n    getCards,\n    getCardsIds,\n    getActiveCard,\n    getTurnCards,\n    getCardsSet,\n}","import React from 'react';\r\n\r\nconst Title = (props) => {\r\n\r\n    return(\r\n    <h2>{props.title}</h2>\r\n    )\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport Button from \"../../utils/Button/Button\";\r\nimport * as renderBtns from \"../../../utils/renderData/renderBtns.json\";\r\nimport { closeCard, turnCard } from \"../../../redux/cards/actionOpenCard\";\r\nimport scss from \"./BtnsCtrlCardHeader.module.scss\";\r\n\r\nconst dataRender = renderBtns.btnsCtrlCardHeader;\r\n\r\nconst BtnsCtrlCardHeader = ({ actionId }) => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleCardStatus = btnAction => {\r\n\t\tswitch (btnAction) {\r\n\t\t\tcase \"close\":\r\n\t\t\t\treturn dispatch(closeCard(actionId));\r\n\t\t\tcase \"turn\":\r\n\t\t\t\treturn dispatch(turnCard(actionId));\r\n\t\t\tdefault:\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<ul className={scss.btnsList}>\r\n\t\t\t{dataRender.map(data => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={shortid.generate()}>\r\n\t\t\t\t\t\t<Button {...data} cb={handleCardStatus} args={[data.action]} />\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default BtnsCtrlCardHeader;\r\n","import React from 'react';\r\nimport Title from '../Title/Title';\r\nimport BtnsCtrlCardHeader from '../../patterns/BtnsCtrlCardHeader/BtnsCtrlCardHeader';\r\nimport scss from './ModalWindow.module.scss';\r\n\r\nconst ModalWindow = props => {\r\n    const {title, id, actionId} = props;\r\n\r\n    return (\r\n        <section id={id} className={scss.window}>\r\n            <div className={scss.header}>\r\n                <Title title={title}/>    \r\n                <BtnsCtrlCardHeader actionId={actionId}/>\r\n            </div>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ModalWindow;","import React from 'react';\r\n\r\nconst Input = ({props}) => {\r\n\r\n    const {label, inputName, inputValue, type} = props;\r\n\r\n    return (\r\n        <label>\r\n            {`${label}:`}\r\n            <input type={type} name={inputName} value={inputValue}/>\r\n        </label>\r\n    )\r\n    \r\n}\r\n\r\nexport default Input;","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport shortid from \"shortid\";\r\nimport Button from \"../../utils/Button/Button\";\r\n\r\nconst styles = {\r\n\tlist: {\r\n\t\tdisplay: \"flex\",\r\n\t},\r\n};\r\n\r\nconst BtnsColection = props => {\r\n\tconst dispatch = useDispatch();\r\n    const { dataRender, cbArr, cardId } = props;\r\n\tconst dataUpdated = cbArr.length ? dataRender.map((data, idx) => ({ ...data, cb: cbArr[idx] })) : dataRender;\r\n\r\n\tconst handleCardStatus = (cardId, cb) => {\r\n\t\tdispatch(cb(cardId));\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<ul style={styles.list}>\r\n\t\t\t{dataUpdated.map(data => (\r\n\t\t\t\t<li key={shortid.generate()}>\r\n\t\t\t\t\t<Button {...data} cb={handleCardStatus} args={[cardId, data.cb]} />\r\n\t\t\t\t</li>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default BtnsColection;\r\n\r\nBtnsColection.defaultProps = {\r\n\tcbArr: [],\r\n\tcardId: '',\r\n}\r\n","import React, { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport Input from \"../../utils/Input/Input\";\r\nimport BtnsColection from \"../BtnsColection/BtnsColection\";\r\n// import { postFoodsData } from '../../../utils/fetch/fetchForm';\r\nimport scss from \"./FormInputData.module.scss\";\r\n\r\nconst InputDataForm = props => {\r\n\tconst { dataRender, btnsColSets } = props;\r\n\r\n\t// state\r\n\tconst [data, setData] = useState({});\r\n\r\n\t// handlers\r\n\tconst handleGetInputData = e => {\r\n\t\tconst { name, value } = e.target;\r\n\t\tconst obj = {};\r\n\t\tobj[name] = value;\r\n\t\tsetData({ ...data, ...obj });\r\n\t};\r\n\t// const handleFormSubmit = e => {\r\n\t//     e.preventDefault();\r\n\t//     const id = shortid.generate();\r\n\t//     postFoodsData({id, ...data});\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName={scss.foodsCard}\r\n\t\t\tonChange={handleGetInputData}\r\n\t\t\t// onSubmit={handleFormSubmit}\r\n\t\t>\r\n\t\t\t<ul>\r\n\t\t\t\t{dataRender.map(el => (\r\n\t\t\t\t\t<li key={dataRender.length > 1 ? shortid.generate() : \"\"}>\r\n\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\tprops={{\r\n\t\t\t\t\t\t\t\tlabel: el.label,\r\n\t\t\t\t\t\t\t\tinputName: el.nameIn,\r\n\t\t\t\t\t\t\t\ttype: el.type ? el.type : \"text\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t\t<BtnsColection dataRender={btnsColSets} />\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default InputDataForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ModalWindow from \"../../components/utils/ModalWindow/ModalWindow\";\r\nimport FormInputData from \"../../components/patterns/FormInputData/FormInputData\";\r\nimport BtnsFinished from \"../../components/patterns/BtnsColection/BtnsColection\";\r\nimport Title from \"../../components/utils/Title/Title\";\r\nimport { getCardsIds } from \"../../redux/cards/cardSelectors\";\r\nimport { addCardTitle } from \"../../redux/cards/actionOpenCard\";\r\n\r\nimport scss from \"./pageCardFood.module.scss\";\r\nimport * as dataRender from \"../../utils/renderData/renderCardFood.json\";\r\n\r\nconst PageFoodCard = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst openedCards = useSelector(getCardsIds);\r\n\r\n\tconst { id, title } = dataRender.modalFoodCard;\r\n\tconst {\r\n\t\tformInputsDescrSets,\r\n\t\tformSaleCtrlSets,\r\n\t\tformUnitsSets,\r\n\t\tsetsLocalBtnsCard,\r\n\t\tsetsGlobalBtnsCard,\r\n\t} = dataRender.default;\r\n\r\n\tuseEffect(() => {\r\n\t\topenedCards.includes(id) && dispatch(addCardTitle({ id, title }));\r\n\t\t// eslint-disable-next-line\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ModalWindow id={id} title={title} actionId={id}>\r\n\t\t\t<FormInputData dataRender={formInputsDescrSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t<ul className={scss.advSetPanel}>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Title title=\"Цена и наценка\" />\r\n\t\t\t\t\t<FormInputData dataRender={formSaleCtrlSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Title title=\"Единицы измерения\" />\r\n\t\t\t\t\t<FormInputData dataRender={formUnitsSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<div className={scss.bottomSideBar}>\r\n\t\t\t\t<BtnsFinished dataRender={setsGlobalBtnsCard} />\r\n\t\t\t</div>\r\n\t\t</ModalWindow>\r\n\t);\r\n};\r\n\r\nexport default PageFoodCard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// import components\r\nimport ModalWindow from \"../../components/utils/ModalWindow/ModalWindow\";\r\nimport FormInputData from \"../../components/patterns/FormInputData/FormInputData\";\r\nimport BtnsFinished from \"../../components/patterns/BtnsColection/BtnsColection\";\r\nimport Title from \"../../components/utils/Title/Title\";\r\n\r\n// imp utils\r\nimport * as dataRender from \"../../utils/renderData/renderCardCustomer.json\";\r\n\r\nimport { getCardsIds } from \"../../redux/cards/cardSelectors\";\r\nimport { addCardTitle } from \"../../redux/cards/actionOpenCard\";\r\n\r\n// imp styles\r\nimport scss from \"./pageCardCustomer.module.scss\";\r\n\r\nconst PageCardCustomer = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst openedCards = useSelector(getCardsIds);\r\n\r\n\tconst { id, title } = dataRender.modalCardCustomer;\r\n\tconst {\r\n\t\tformInputsDescrSets,\r\n\t\tformSaleCtrlSets,\r\n\t\tformUnitsSets,\r\n\t\tsetsLocalBtnsCard,\r\n\t\tsetsGlobalBtnsCard,\r\n\t} = dataRender.default;\r\n\r\n\tuseEffect(() => {\r\n\t\topenedCards.includes(id) && dispatch(addCardTitle({ id, title }));\r\n\t\t// eslint-disable-next-line\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ModalWindow id={id} title={title} actionId={id}>\r\n\t\t\t<FormInputData dataRender={formInputsDescrSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t<ul className={scss.advSetPanel}>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Title title=\"Цена и наценка\" />\r\n\t\t\t\t\t<FormInputData dataRender={formSaleCtrlSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<Title title=\"Единицы измерения\" />\r\n\t\t\t\t\t<FormInputData dataRender={formUnitsSets} btnsColSets={setsLocalBtnsCard} />\r\n\t\t\t\t</li>\r\n\t\t\t</ul>\r\n\t\t\t<div className={scss.bottomSideBar}>\r\n\t\t\t\t<BtnsFinished dataRender={setsGlobalBtnsCard} />\r\n\t\t\t</div>\r\n\t\t</ModalWindow>\r\n\t);\r\n};\r\n\r\nexport default PageCardCustomer;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// import actions\r\nimport { getCardsSet, getCardsIds } from \"../../../redux/cards/cardSelectors\";\r\n\r\n// import components\r\nimport PageCardFood from \"../../../pages/pageCardFood/pageCardFood\";\r\nimport PageCardCustomer from \"../../../pages/pageCardCustomer/pageCardCustomer\";\r\n\r\n// import helpers\r\nimport \"./CardsArea.module.scss\";\r\n\r\n// helpers\r\n\r\nconst CardsArea = () => {\r\n\t\r\n\t// State\r\n\tconst openedCardsIds = useSelector(getCardsIds);\r\n\tconst openedCardsSet = useSelector(getCardsSet);\r\n\r\n\t// state\r\n\t// const [styles, setStyles] = useState({}); \r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{openedCardsIds.includes(\"card-food\") && openedCardsSet.filter(card => card.id === \"card-food\")[0]?.[\"status\"] !== \"turn\" && <PageCardFood />}\r\n\t\t\t{openedCardsIds.includes(\"card-customer\") && openedCardsSet.filter(card => card.id === \"card-customer\")[0]?.[\"status\"] !== \"turn\" && <PageCardCustomer />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardsArea;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BtnsColection from \"../BtnsColection/BtnsColection\";\r\n\r\n// actions\r\nimport { closeCard, openCard } from \"../../../redux/cards/actionOpenCard\";\r\nimport { getActiveCard } from \"../../../redux/cards/cardSelectors\";\r\n// styles\r\nimport scss from \"./MarkCard.module.scss\";\r\n// renderSets\r\nimport { btnsCtrlMarkCard } from \"../../../utils/renderData/renderBtns.json\";\r\n\r\nconst MarkCard = ({ props }) => {\r\n\tconst { id } = props;\r\n\tconst title = useSelector(state => getActiveCard(state, id)).title;\r\n\tconsole.log(\"title :>> \", title);\r\n\r\n\treturn (\r\n\t\t<article data-action-id={id} className={scss.label}>\r\n\t\t\t<h2 className={scss.title}>{title}</h2>\r\n\t\t\t<BtnsColection dataRender={btnsCtrlMarkCard} cardId={id} cbArr={[openCard, closeCard]} />\r\n\t\t</article>\r\n\t);\r\n};\r\n\r\nexport default MarkCard;\r\n\r\nMarkCard.defaultProps = {\r\n\ttitle: \"Any Card\",\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport MarkCard from \"../../patterns/MarkCard/MarkCard\";\r\n\r\nimport { getTurnCards } from \"../../../redux/cards/cardSelectors\";\r\n\r\nimport scss from \"./StatusBar.module.scss\";\r\n\r\nconst StatusBar = () => {\r\n\tconst marks = useSelector(getTurnCards);\r\n\r\n\treturn (\r\n\t\t<footer className={scss.footer}>\r\n\t\t\t{marks.length > 0 && (\r\n\t\t\t\t<ul className={scss.list}>\r\n\t\t\t\t\t{marks.map(({ title, id }) => (\r\n\t\t\t\t\t\t<li>{<MarkCard props={{ title, id }} />}</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t)}\r\n\t\t\t<p>&copy; Produced by Apleuha</p>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default StatusBar;\r\n","import React from \"react\";\r\n\r\n// import components\r\nimport TopMenu from \"../components/general/TopMenu/TopMenu\";\r\nimport CardsArea from \"../components/general/CardsArea/CardsArea\";\r\nimport StatusBar from \"../components/general/StatusBar/StatusBar\";\r\n\r\n// // import helpers\r\nimport \"./App.module.scss\";\r\nimport { app } from \"./App.module.scss\";\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t// <Suspense>\r\n\t\t\t<div className={app}>\r\n\t\t\t\t<TopMenu />\r\n\t\t\t\t<CardsArea />\r\n\t\t\t\t<StatusBar />\r\n\t\t\t</div>\r\n\t\t// </Suspense>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport App from './App/App';\r\nimport createStore from './createStore';\r\nimport scss from './sass/index.scss';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// ====== configureStore =======\r\n// const store = configureStore({\r\n//   reducer: createStore,\r\n// });\r\n// =============================\r\n\r\nconst store = createStore;\r\n\r\nconst render = Component => {\r\n  return ReactDOM.render(\r\n    <Provider store={store}>          \r\n      <Component scss={scss}/>          \r\n    </Provider>,\r\n    document.getElementById('root'),\r\n  );\r\n};\r\n\r\nrender(App);\r\n\r\nif (module.hot) {\r\n  module.hot.accept('./App/App', () => {\r\n    // eslint-disable-next-line global-require\r\n    const NextApp = require('./App/App').default;\r\n    render(NextApp);\r\n  });\r\n}\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as actionsCard from \"./actionOpenCard\";\r\n// const initialState = [];\r\n\r\nconst getCardById = (state, id) => state.find(el => el.id === id);\r\nconst removeCardById = (state, id) => state.filter(card => card.id !== id); // update state removed card by id\r\n\r\nconst updateOpenCard = (state, { payload }) => {\r\n\tconst cardById = getCardById(state, payload);\r\n\treturn cardById\r\n\t? [{ ...cardById, status: \"open\" }, ...removeCardById(state, payload)]\r\n\t: [{ id: payload, status: \"open\" }, ...state];\r\n}\r\n\r\nconst updateTurnedCard = (state, { payload }) => {\r\n\tconst cardById = getCardById(state, payload);\r\n\treturn cardById\r\n\t? [{ ...cardById, status: \"turn\" }, ...removeCardById(state, payload)]\r\n\t: [{ ...cardById, status: \"turn\" }, ...state];\r\n}\r\n\r\nconst addCardTitle = (state, {payload}) => {\r\n\tconst {title, id} = payload;\r\n\tconst cardById = getCardById(state, id);\r\n\tconst cardWithTitle = {...cardById, title};\r\n\treturn [...removeCardById(state, id), cardWithTitle];\r\n}\r\n\r\nexport const reducerOpenCards = createReducer([], {\r\n\t[actionsCard.openCard]: updateOpenCard,\r\n\t[actionsCard.turnCard]: updateTurnedCard,\r\n\t[actionsCard.closeCard]: (state, { payload }) => state.filter(el => el.id !== payload),\r\n\t[actionsCard.addCardTitle]: addCardTitle,\r\n});\r\n\r\n// export const cardsReducer = combineReducers({\r\n// \tcards,\r\n// });\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { openTopMenuList, closeTopMenuList, openTopMenuItem, closeTopMenuItem } from \"./actionTopMenu\";\r\n\r\nconst reducerTopMenuList = createReducer(\"\", {\r\n\t[openTopMenuList]: (_, { payload }) => payload, // id\r\n\t[closeTopMenuList]: () => \"\", // ''\r\n});\r\n\r\nconst reducerTopMenuItem = createReducer(\"\", {\r\n\t[openTopMenuItem]: (_, { payload }) => payload,\r\n\t[closeTopMenuItem]: () => \"\",\r\n});\r\n\r\nexport default combineReducers({\r\n    list: reducerTopMenuList,\r\n    item: reducerTopMenuItem,\r\n}) \r\n","// import {combineReducers} from 'redux';\r\nimport {combineReducers} from '@reduxjs/toolkit';\r\nimport {reducerOpenCards} from '../cards/cardsReducer';\r\nimport reducerTopMenu from '../topMenu/topMenuReducer';\r\n\r\nexport const reducerActiveStateEls = combineReducers({\r\n    openCards: reducerOpenCards,\r\n    openTopMenu: reducerTopMenu,\r\n})","import { combineReducers } from \"redux\";\r\n// import { persistReducer } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\n// const sessionPersistConfig = {\r\n//   key: 'session',\r\n//   storage,\r\n//   whitelist: ['token'],\r\n// };\r\n\r\n// const locationPersistConfig = {\r\n//   key: 'location',\r\n//   storage,\r\n// };\r\n// import {reducerActiveStateEls} from './redux/activeStateElements/reducerActiveStateElements';\r\n// import {reducerIsTopMenuListOpen} from './redux/topMenu/reducerTopMenu';\r\nimport { reducerActiveStateEls } from \"./redux/reducersGroups/reducersActiveStateEls\";\r\n\r\nconst rootReducer = combineReducers({\r\n\tactiveStateEls: reducerActiveStateEls,\r\n\t// cards: cardsReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","// import { createStore, applyMiddleware } from 'redux';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import logger from 'redux-logger';\r\nimport rootReducer from './rootReducer';\r\n\r\n// const middlewares = process.env.NODE_ENV === 'development' ? [thunk] : [thunk];\r\n\r\nexport default configureStore({\r\n  reducer: rootReducer,\r\n})\r\n"],"sourceRoot":""}